# -*- coding: utf-8 -*-
"""Task 4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NuZU8AKA8Y8ksFNYBygasllb1qqveekf

Assessment

I am going to provide two .csv files , you are supposed to work on them and have to provide solutions to the following problems

import necessary libraries
"""

import pandas as pd
df1=pd.read_csv("/content/college_1 (1).csv")
df1
df2=pd.read_csv("/content/college_2 (1).csv")
df2

"""merge those two csv files (after getting as dataframes, get them as a single dataframe"""

df3=pd.concat([df1, df2], ignore_index=True)

df3.to_csv("College.csv")
college=pd.read_csv("College.csv")
college

"""Take each csv file , split that csv file into multiple categories (example csv files are added in the repo)

Take each csv file , split that csv file into multiple categories (example csv files are added in the repo)

###### consider if the codekata score exceeds 15000 points(present week) then make a csv on those observations as Exceeded expectations.csv

if 10000<codekata score<15000 (Reached_expectations.csv)

if 7000<codekata score<10000 (Needs_Improvement.csv)

if  codekate score < 7000        (Unsatisfactory.csv)
"""

unsatisfactory = df3[df3['CodeKata Score'] < 7000].head()
unsatisfactory.to_csv('unsatisfactory.csv',index=True)
pd.read_csv("unsatisfactory.csv")

exceeded_expectations=df3[df3['CodeKata Score'] > 15000].head(5)
exceeded_expectations.to_csv('exceeded_expectations.csv',index=True)
pd.read_csv("exceeded_expectations.csv")

needs_improvement=df3[(df3['CodeKata Score'] > 7000) & (df3["CodeKata Score"] <10000)].head(5)
needs_improvement.to_csv('needs_improvement.csv',index=True)
pd.read_csv("needs_improvement.csv")

reached_expectations=df3[(df3['CodeKata Score'] > 10000) & (df3["CodeKata Score"] <15000)].head(5)
reached_expectations.to_csv('reached_expectations.csv',index=True)
pd.read_csv("reached_expectations.csv")

"""Average of previous week geekions vs this week geekions (i.e Previous Geekions vs CodeKata Score)"""

college["CodeKata Score"].mean()

college["Previous Geekions"].mean()

"""No of students participated"""

len(df3)

"""Average completion of python course or my_sql or python english or computational thinking"""

college["python"].mean()

"""rising star of the week (top 3 candidate who performed well in that particular week)"""

Topper=df3.nlargest(n=3, columns=['CodeKata Score'])
Topper

"""Shining stars of the week (top 3 candidates who has highest geekions)"""

topper=df3.nlargest(n=3, columns=['Previous Geekions'])
topper

"""Department wise codekata performence (pie chart)"""

import matplotlib.pyplot as plt

colors = ['red', 'blue', 'green']

college.groupby(['Department']).mean().plot(kind='pie', y='CodeKata Score',title='Department wise performance',colors=colors,autopct='%1.0f%%')

"""Department wise toppers (horizantal bar graph or any visual representations of your choice)"""

cse=df3[df3["Department"]=='Computer Science and Engineering']
ece=df3[df3["Department"]=='Electronics and Communication Engineering']
eee=df3[df3["Department"]=='Electronics and Electrical Engineering']

csescore=cse[['Name','CodeKata Score']]
ecescore=ece[['Name','CodeKata Score']]
eeescore=eee[['Name','CodeKata Score']]

cstop=csescore.nlargest(n=5,columns=['CodeKata Score'])
cstop.plot(kind='bar',title="cse toppers", color="black", xlabel='ranking', ylabel='score',)
ecetop=ecescore.nlargest(n=5,columns=['CodeKata Score'])
ecetop.plot(kind='bar',title="ece toppers", color="red", xlabel='ranking', ylabel='score')
eetop=eeescore.nlargest(n=5,columns=['CodeKata Score'])
eetop.plot(kind='bar',title="eee toppers", color="green", xlabel='ranking', ylabel='score')

cse_x=cstop['Name'].tolist()
cse_y=cstop['CodeKata Score'].tolist()
ece_x=cstop['Name'].tolist()
ece_y=cstop['CodeKata Score'].tolist()
eee_x=cstop['Name'].tolist()
eee_y=cstop['CodeKata Score'].tolist()
plt.bar(cse_x,cse_y,color="red",width = 0.5)
plt.xticks(rotation=90)
plt.xlabel("Names of toppers")
plt.ylabel("codekata scores")
plt.show()
plt.bar(ece_x,ece_y,color="blue",width = 0.5)
plt.xticks(rotation=90)
plt.xlabel("Names of toppers")
plt.ylabel("codekata scores")
plt.show()
plt.bar(eee_x,eee_y,color="pink",width =0.5)
plt.xticks(rotation=90)
plt.xlabel("Names of toppers")
plt.ylabel("codekata scores")
plt.show()